import { createFileRoute } from "@tanstack/react-router";
import { AppType } from "../../../backend/src/app.ts";
import { hc } from "hono/client";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";
import { queryClient } from "../main.tsx";
import ConnectButton from "../components/ConnectWallet.tsx";
import { createChart } from "lightweight-charts";
import { ChartComponent } from "../components/ChartComponent.tsx";
const client = hc<AppType>("http://localhost:3000/");

async function fetchPosts() {
  try {
    const response = await client.explorer.getMarketData.$get();
    if (!response.ok) {
    }
    const data = await response.json();
    return data.data;
  } catch (err: any) {
    console.error(err.message);
    throw err;
  }
}

const postsQueryOptions = queryOptions({
  queryKey: ["posts"],
  queryFn: () => fetchPosts(),
});

const chartData = {
  prices: [
    [1722988800000, 483.58147031545303],
    [1723075200000, 474.91517548175267],
    [1723161600000, 517.0200212361478],
    [1723248000000, 508.50598966236623],
    [1723334400000, 523.4081972371441],
    [1723420800000, 503.4723056454186],
    [1723507200000, 518.7522169712583],
    [1723593600000, 523.5534548294074],
    [1723680000000, 523.8422624962476],
    [1723766400000, 519.9897914144176],
    [1723852800000, 519.7178383319489],
    [1723939200000, 542.028372504351],
    [1724025600000, 530.6035820721123],
    [1724112000000, 561.3466933045529],
    [1724198400000, 569.5129223388254],
    [1724284800000, 569.5545076353214],
    [1724371200000, 583.7567536762228],
    [1724457600000, 590.4688964429359],
    [1724544000000, 580.9115618477243],
    [1724630400000, 573.1076363055],
    [1724716800000, 548.8530122031234],
    [1724803200000, 534.6723254250207],
    [1724889600000, 536.5579977474256],
    [1724976000000, 536.8036844570744],
    [1725062400000, 535.4547657229192],
    [1725148800000, 532.7142189592856],
    [1725235200000, 512.8645441575117],
    [1725321600000, 526.1346608462134],
    [1725408000000, 518.9769919279926],
    [1725494400000, 508.0001826075747],
    [1725539896000, 503.27694073512055],
  ],
  market_caps: [
    [1722988800000, 70529736005.98248],
    [1723075200000, 69405610033.30518],
    [1723161600000, 75379973055.30574],
    [1723248000000, 74121729931.63289],
    [1723334400000, 76361242414.22313],
    [1723420800000, 73430101810.45255],
    [1723507200000, 75670419007.80066],
    [1723593600000, 76342061983.68185],
    [1723680000000, 76380430420.0317],
    [1723766400000, 75841500331.08524],
    [1723852800000, 75855800746.29582],
    [1723939200000, 79079252404.1194],
    [1724025600000, 77408470293.99077],
    [1724112000000, 81819968892.46297],
    [1724198400000, 83358274544.39061],
    [1724284800000, 83056570988.02866],
    [1724371200000, 85179220985.07648],
    [1724457600000, 86138952585.00223],
    [1724544000000, 84650512772.08447],
    [1724630400000, 83610905694.51266],
    [1724716800000, 80080391634.32704],
    [1724803200000, 78160031799.81288],
    [1724889600000, 78331630413.95227],
    [1724976000000, 78358707308.23318],
    [1725062400000, 78116141811.91739],
    [1725148800000, 77715922914.05212],
    [1725235200000, 74829827536.7718],
    [1725321600000, 76831499618.63228],
    [1725408000000, 75821979841.87625],
    [1725494400000, 74082271440.05545],
    [1725539896000, 73593970894.42007],
  ],
  total_volumes: [
    [1722988800000, 1608444664.859629],
    [1723075200000, 1172923833.5303307],
    [1723161600000, 964414902.9202516],
    [1723248000000, 588500103.9347321],
    [1723334400000, 537804503.7654083],
    [1723420800000, 797141781.6084327],
    [1723507200000, 1003673165.5908451],
    [1723593600000, 967141273.6618243],
    [1723680000000, 791043544.1797582],
    [1723766400000, 835902359.0401022],
    [1723852800000, 721531477.325509],
    [1723939200000, 665967566.2581954],
    [1724025600000, 641658585.5509945],
    [1724112000000, 835825601.7907687],
    [1724198400000, 1333942724.7945085],
    [1724284800000, 1112040435.3405745],
    [1724371200000, 1204928827.4745126],
    [1724457600000, 1209666815.6702595],
    [1724544000000, 1096537691.4227378],
    [1724630400000, 801561228.6776841],
    [1724716800000, 971837222.7143233],
    [1724803200000, 1042927606.5953478],
    [1724889600000, 1100999066.934797],
    [1724976000000, 720268698.6317524],
    [1725062400000, 856795243.7737503],
    [1725148800000, 376648540.750375],
    [1725235200000, 694174839.1502885],
    [1725321600000, 965913618.7430446],
    [1725408000000, 811117819.4505297],
    [1725494400000, 1261230278.541177],
    [1725539896000, 892202388.6782504],
  ],
};

const formattedData = chartData.prices.map((price) => {
  return { time: price[0] / 1000, value: Number(price[1].toFixed(2)) };
});

console.log("formatted", formattedData);

export const Route = createFileRoute("/")({
  loader: async () => queryClient.ensureQueryData(postsQueryOptions),
  component: () => {
    const { data } = useSuspenseQuery(postsQueryOptions);
    const initialData = formattedData;
    return (
      <div>
        <ConnectButton />
        return{" "}
        <ChartComponent
          {...{ className: "chart" }}
          data={initialData}
        ></ChartComponent>
        ;
      </div>
    );
  },
});
